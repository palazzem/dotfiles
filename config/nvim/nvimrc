" vim-plug
" --------

" auto-install vim-plug
if empty(glob('~/.config/nvim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.config/nvim/plugged')

" installed plugins
" -----------------

" colors scheme
Plug 'morhetz/gruvbox'

" syntax highlighting
Plug 'peterhoeg/vim-qml'
Plug 'artoj/qmake-syntax-vim'
Plug 'octol/vim-cpp-enhanced-highlight'

" autocomplete, languages and stuff
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --omnisharp-completer --tern-completer' }
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'davidhalter/jedi-vim'
Plug 'nvie/vim-flake8'
Plug 'ervandew/supertab'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'fatih/vim-go', { 'for': ['go'] }
Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'mxw/vim-jsx', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'elzr/vim-json'

" navigation and file search
Plug 'scrooloose/nerdtree'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'rking/ag.vim'
Plug 'dkprice/vim-easygrep'

" editor improvements
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'godlygeek/tabular'

" git management
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

call plug#end()

" NeoVim configurations
" ---------------------

" colors
syntax enable
set background=dark
colorscheme gruvbox

" editor
set nowrap
set tabstop=4                   " number of visual spaces per TAB
set softtabstop=4               " number of spaces in tab when editing
set shiftwidth=4                " number of spaces to use for autoindent
set expandtab                   " tabs are space
set autoindent                  " auto indentation
set copyindent                  " copy indent from the previous line
set hidden
set number                      " show line number
set showcmd                     " show command in bottom bar
set cursorline                  " highlight current line
set wildmenu                    " visual autocomplete for command menu
set showmatch                   " highlight matching brace
set laststatus=2                " window will always have a status line

" disabling stuff
set nobackup
set noswapfile

" search
set incsearch                   " search as characters are entered
set hlsearch                    " highlight matche
set ignorecase                  " ignore case when searching
set smartcase                   " case insensitive search until an upper case text is typed

" folding
set foldenable
set foldlevelstart=10           " default folding level when buffer is opened
set foldnestmax=10              " maximum nested fold
set foldmethod=syntax           " fold based on indentation

set clipboard+=unnamedplus      " clipboard management

" key mappings
let mapleader=","
inoremap jj <esc>

nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>
nnoremap <C-w> :bp <BAR> bd #<CR>

nnoremap <c-p> :FZF<CR>
nnoremap <leader><space> :nohlsearch<CR>

nnoremap <A-j> :wincmd j<CR>
nnoremap <A-k> :wincmd k<CR>
nnoremap <A-l> :wincmd l<CR>
nnoremap <A-h> :wincmd h<CR>

nnoremap <leader>i mzgg=G`z<CR>
map <C-e> :NERDTreeToggle<CR>

nnoremap <leader>g :YcmCompleter GoTo<CR>

" plugins configuration
" ---------------------

" using Ag as a grep command
if executable('ag')
    " Note we extract the column as well as the file and line number
    set grepprg=ag\ --nogroup\ --nocolor\ --column
    set grepformat=%f:%l:%c%m
endif

" YCM
let g:ycm_filetype_specific_completion_to_disable = { 'gitcommit': 1, 'python': 1 }
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_use_ultisnips_completer = 1
let g:ycm_seed_identifiers_with_syntax = 1

" airline
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#buffer_nr_show=0

" NERDTree
let g:NERDTreeIgnore=['\.pyc$', '__pycache__']
let g:NERDTreeShowHidden=1

" UltiSnips {{{
let g:UltiSnipsExpandTrigger       = "<c-j>"
let g:UltiSnipsJumpForwardTrigger  = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-p>"
let g:UltiSnipsListSnippets        = "<c-k>"
let g:UltiSnipsUsePythonVersion = 3

" cpp
let g:cpp_class_scope_highlight = 1

" Flake8
let g:flake8_show_in_gutter=1
let g:flake8_show_in_file=1

" helpers
" -------

" cleaning trailing whitespace previous :w
match ErrorMsg '\s\+$'
function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction

autocmd BufWritePre * :call TrimWhiteSpace()
